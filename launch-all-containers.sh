#!/bin/bash

# Script de lancement optimis√© pour tous les docker-compose
# Usage: ./launch-all-containers.sh [-v] [directory]
#   -v : Mode verbeux (plus de d√©tails)
#   directory : R√©pertoire √† scanner (d√©faut: r√©pertoire courant)

# Variables
VERBOSE=false
DIR="."
SUCCESS_COUNT=0
ERROR_COUNT=0
UNCHANGED_COUNT=0
SUCCESS_FILES=()
ERROR_FILES=()
UNCHANGED_FILES=()

# Fonction d'aide
show_help() {
    echo "Usage: $0 [-v] [-h] [directory]"
    echo ""
    echo "Options:"
    echo "  -v, --verbose    Mode verbeux avec plus de d√©tails"
    echo "  -h, --help       Affiche cette aide"
    echo "  directory        R√©pertoire √† scanner (d√©faut: r√©pertoire courant)"
    echo ""
    echo "Exemples:"
    echo "  $0                    # Lance tous les docker-compose du r√©pertoire courant"
    echo "  $0 -v                 # Mode verbeux"
    echo "  $0 /path/to/configs   # Lance les docker-compose du r√©pertoire sp√©cifi√©"
    echo "  $0 -v /path/to/configs # Mode verbeux avec r√©pertoire sp√©cifi√©"
}

# Fonction de log verbeux
log_verbose() {
    if [ "$VERBOSE" = true ]; then
        echo "$1"
    fi
}

# Fonction de log normal (toujours affich√©)
log_info() {
    echo "$1"
}

# Fonction de log d'erreur
log_error() {
    echo "‚ùå ERREUR: $1" >&2
}

# Parse des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            log_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
        *)
            DIR="$1"
            shift
            ;;
    esac
done

# V√©rification du r√©pertoire
if [ ! -d "$DIR" ]; then
    log_error "Le r√©pertoire '$DIR' n'existe pas"
    exit 1
fi

# D√©but du traitement
if [ "$VERBOSE" = true ]; then
    log_info "üîç Recherche des fichiers docker-compose dans $DIR"
else
    log_info "üöÄ Lancement et mise √† jour des conteneurs..." # <--- MODIFICATION MINEURE (texte)
fi

# Comptage des fichiers disponibles
file_count=0
for file in "$DIR"/docker-compose*.yml; do
    [ -f "$file" ] && ((file_count++))
done

if [ $file_count -eq 0 ]; then
    log_error "Aucun fichier docker-compose*.yml trouv√© dans $DIR"
    exit 1
fi

log_verbose "üìã $file_count fichier(s) docker-compose trouv√©(s)"

# Traitement des fichiers
for file in "$DIR"/docker-compose*.yml; do
    # V√©rifie que le fichier existe vraiment
    [ -f "$file" ] || continue

    # G√©n√®re un nom de projet unique bas√© sur le nom du fichier sans extension
    project_name=$(basename "$file" .yml)
    
    log_verbose "----------------------------------------"
    log_verbose "üì¶ Traitement de $file (projet: $project_name)"

    # --- MODIFICATION PRINCIPALE ---
    # √âtape 1 : Forcer la mise √† jour de l'image
    log_verbose "üîÑ V√©rification des mises √† jour de l'image pour $project_name..."
    if ! docker compose -f "$file" --project-name "$project_name" pull > /dev/null 2>&1; then
        log_verbose "‚ö†Ô∏è  Avertissement: √âchec du pull pour $project_name. L'image locale sera utilis√©e."
    fi
    # --- FIN DE LA MODIFICATION PRINCIPALE ---

    # √âtape 2 : Lancer le conteneur (maintenant avec l'image √† jour)
    log_verbose "üöÄ Lancement du conteneur pour $project_name..." # <--- MODIFICATION MINEURE (log)

    # Capture de la sortie docker compose
    if [ "$VERBOSE" = true ]; then
        # Mode verbeux : affiche tout
        if docker compose -f "$file" --project-name "$project_name" up -d --remove-orphans; then
            log_info "‚úÖ $project_name: Succ√®s"
            SUCCESS_FILES+=("$project_name")
            ((SUCCESS_COUNT++))
        else
            log_error "$project_name: √âchec du lancement"
            ERROR_FILES+=("$project_name")
            ((ERROR_COUNT++))
        fi
    else
        # Mode silencieux : capture la sortie
        output=$(docker compose -f "$file" --project-name "$project_name" up -d --remove-orphans 2>&1)
        exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
            # V√©rifier si des conteneurs ont √©t√© modifi√©s
            if echo "$output" | grep -q "Started\|Created\|Recreated\|Pulled"; then # <--- MODIFICATION (ajout de "Pulled")
                echo "‚úÖ $project_name"
                SUCCESS_FILES+=("$project_name")
                ((SUCCESS_COUNT++))
            else
                echo "‚ö™ $project_name (aucun changement)"
                UNCHANGED_FILES+=("$project_name")
                ((UNCHANGED_COUNT++))
            fi
        else
            echo "‚ùå $project_name"
            log_error "D√©tails: $output"
            ERROR_FILES+=("$project_name")
            ((ERROR_COUNT++))
        fi
    fi
done

# R√©capitulatif final
echo ""
echo "üìä R√âCAPITULATIF"
echo "=================="
echo "üéØ Total trait√©: $((SUCCESS_COUNT + ERROR_COUNT + UNCHANGED_COUNT)) fichier(s)"
echo "‚úÖ Succ√®s (modifi√©s ou mis √† jour): $SUCCESS_COUNT" # <--- MODIFICATION MINEURE (texte)
echo "‚ùå Erreurs: $ERROR_COUNT"
echo "‚ö™ Inchang√©s: $UNCHANGED_COUNT"

# D√©tails par cat√©gorie
if [ ${#SUCCESS_FILES[@]} -gt 0 ]; then
    echo ""
    echo "‚úÖ CONTENEURS MODIFI√âS OU MIS √Ä JOUR:" # <--- MODIFICATION MINEURE (texte)
    printf "   ‚Ä¢ %s\n" "${SUCCESS_FILES[@]}"
fi

if [ ${#ERROR_FILES[@]} -gt 0 ]; then
    echo ""
    echo "‚ùå ERREURS:"
    printf "   ‚Ä¢ %s\n" "${ERROR_FILES[@]}"
fi

if [ ${#UNCHANGED_FILES[@]} -gt 0 ] && [ "$VERBOSE" = true ]; then
    echo ""
    echo "‚ö™ AUCUN CHANGEMENT:"
    printf "   ‚Ä¢ %s\n" "${UNCHANGED_FILES[@]}"
fi

# Code de sortie
if [ $ERROR_COUNT -gt 0 ]; then
    echo ""
    echo "‚ö†Ô∏è  Le script s'est termin√© avec des erreurs"
    exit 1
else
    echo ""
    echo "üéâ Tous les fichiers docker-compose ont √©t√© trait√©s avec succ√®s"
    exit 0
fi